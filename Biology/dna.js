Fork = class {
    constructor() {
        this.value = 0
        this.first = 0
        this.second = 0
        this.basic = 0
        this.id = -1
    }
    string() { //a string of what the fork system looks like
        if (this.basic) return this.value
        return "("+this.first.string()+" | "+this.second.string()+")"
    }
    contains(value) { //Returns true if the resursive (or basic) fork has the specified value
        if (this.basic) return this.value == value
        return this.first.contains(value) || this.second.contains(value)
    }
    maxcharlength() { //Returns the maximum number of characters of values in the fork
        if (this.basic) return this.value.length
        return Math.max(this.first.maxcharlength(), this.second.maxcharlength())
    }
    count() { //count how many items are in this fork (simple forks are 2, single unit "basics" are 1, recursive forks are a lot)
        if (this.basic) return 1
        return this.first.count()+this.second.count()
    }
    list() { //turn all of the items in the forks from recursive form into a list (type array)
        if (this.basic) return [this.value]
        let tempList = []
        tempList.push(...this.first.list())
        tempList.push(...this.second.list())
        return tempList
    }
    levels() { //how many levels of forks there are (simple fork is 1, single unit "basics" are 0, recursive forks are a lot)
        if (this.basic) return 0
        return 1 + Math.max(this.first.levels(), this.second.levels())
    }
    assignID(id){
        if (this.basic) {
            this.id = id
            //this.value+=id
            return 1;
        }
        let used = this.first.assignID(id)
        used += this.second.assignID(id + used)
        return used
    }
    mid(){
        if (this.basic) return this.id
        return (this.first.mid() + this.second.mid()) / 2
    }
    draw(ctx, maxlevels, prevlevel, mylevel, dx ,dy){
        if (this.basic) {
            //horizontal line
            //ctx.fillStyle = "#3af"
            if (maxlevels == mylevel)
                ctx.fillRect(10+dx*(1 + maxlevels - prevlevel), this.id * dy - 15 - dy/2, (prevlevel - mylevel) * dx-10, 10)
            else
                ctx.fillRect(dx*(1 + maxlevels - prevlevel), this.id * dy - 15 - dy/2, (prevlevel - mylevel) * dx, 10)
        }
        else {
            //vertical lines
            let min = this.first.mid()
            let max = this.second.mid()
            //ctx.fillStyle = "#0f0"
            ctx.fillRect(dx*(1 + maxlevels - mylevel), min*dy - 15 - dy/2, 10, (max-min)*dy)

            //horizontal lines
            //ctx.fillStyle = "#3af"
            if (maxlevels == mylevel)
            //I HAVE NO CLUE WHAT THE DIFFERENCE IS BETWEEN THESE TWO LINES (so I randomly chose which one to use until an error occurs)
                ctx.fillRect(10+dx*(maxlevels - mylevel), (min + max)/2 * dy - 15 - dy/2, dx, 10)
                //ctx.fillRect(10+dx*(1 + maxlevels - prevlevel), (min + max)/2 * dy - 15 - dy/2, (prevlevel - mylevel) * dx, 10)
            else
                ctx.fillRect(dx*(1 + maxlevels - prevlevel), (min + max)/2 * dy - 15 - dy/2, (prevlevel - mylevel) * dx+10, 10)

            this.first.draw(ctx, maxlevels, mylevel, this.first.levels(), dx, dy)
            this.second.draw(ctx, maxlevels, mylevel, this.second.levels(), dx, dy)
        }
    }
}
function Basic(value) { //A one unit fork (to add constants)
    let temp = new Fork()
    temp.value = value
    temp.basic = true
    return temp
}
function Dual(first, second) { //A simple, recursable two pronged fork
    let temp = new Fork()
    temp.first = first
    temp.second = second
    temp.basic = false
    return temp
}
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1)
}
let wordbank = []
document.getElementById("random-tree-button").disabled = true
fetch('foods.txt')
  .then(response => response.text())
  .then(text => {wordbank = text.split('\n');document.getElementById("random-tree-button").disabled = false;document.getElementById("random-tree-button").onclick = function(){drawTree(
      //RandomFork(5, 0.5)
      //ForkLength(5)
      ForkSize(8)
      );};})//.then(() => drawTree(RandomFork(5,0.5)))
function RandomWord() {
    return wordbank[parseInt(Math.random() * wordbank.length)]
}
function RandomFork(maxlength, chance) {
    if (maxlength > 0 && Math.random() < chance)
        return Dual(RandomFork(maxlength-1, chance), RandomFork(maxlength-1, chance))
    else
        return Basic(capitalize(RandomWord()))

    // let temp = new Fork()
    // if (Math.random() < chance) { //chance is chance of duplicating
    //     temp = Dual(RandomFork(maxlength, chance), RandomFork(maxlength, chance))
    // }
    // else {
    //     temp = Basic(capitalize(RandomWord()))
    // }
    // return temp
}
function ForkLength(length) {
    if (length > 0)
    {
        let useFirst = Math.random() > 0.5
        if (useFirst) {
            return Dual(ForkLength(length-1), RandomFork(length-1, 0.5),)
        }
        else {
            return Dual(RandomFork(length-1, 0.5), ForkLength(length-1),)
        }
    }
    return Basic(capitalize(RandomWord()))
}
function ForkSize(size){
    if (size > 1) {
        let firstAssigned = 1 + parseInt(Math.random() * (size - 1))
        let secondAssigned = size - firstAssigned
        return Dual(ForkSize(firstAssigned), ForkSize(secondAssigned))
    }
    return Basic(capitalize(RandomWord()))
}
function _forksize(size) {
    if (size > 1) {
        let firstAssigned = parseInt(Math.random() * size)
        return 
    }
    return [1, Basic(capitalize(RandomWord()))]
}
function ForkDimensions(length, size) {
    
}
var fork1 = Dual(Dual(Basic("one"),Basic("two")),Basic("three"))
var fork2 = Dual(
                Dual(
                    Basic("Onion")
                ,
                    Basic("Potato")
                )
            ,
                Dual(
                    Basic("Pumpkin")
                ,
                    Dual(
                        Dual(
                            Dual(
                                Basic("Apple")
                            ,
                                Basic("Orange")
                            )
                        ,
                            Dual(
                                Basic("Lime")
                            ,
                                Basic("Lemon")
                            )
                        )
                    ,
                        Basic("Strawberry")
                    )
                )
            )
var fork3 = Basic("Single")
var easterEggTree = Dual(Dual(Basic("DNA"),Dual(Basic("Phylogeny"),Basic(""))),Dual(Dual(Basic("( with"),Basic("     JSON )")),Basic("")))

var canvas = document.getElementById("phylogeny tree")
var ctx = canvas.getContext("2d")
var width = canvas.width
var height = canvas.height
ctx.fillStyle = "#fff"
ctx.fillRect(0,0,width,height)
ctx.fillStyle = "#00f"
ctx.font = "30px Segoe UI";
//ctx.fillText("Hello World", 10, 50);
function drawTree(fork) {
    ctx.fillStyle = "#fff"
    ctx.fillRect(0,0,width,height)
    fork.assignID(1)
    let list = fork.list()
    let levels = fork.levels()
    console.log("Drawing L"+levels+" "+list)
    //console.log(list)
    //console.log(levels + " levels")
    let dy = height / list.length
    var putx = 440 - Math.max(0, 15 * (fork.maxcharlength() - 15))
    let dx = putx / (levels+1)

    //Add names
    ctx.fillStyle = "#000"
    list.forEach((e, i) => ctx.fillText(e, putx+11, 1 + i * dy + dy/2));
    ctx.fillStyle = "#00f"
    list.forEach((e, i) => ctx.fillText(e, putx+10, 0 + i * dy + dy/2));

    //Add lines
    ctx.fillStyle = "#000"
    //ctx.fillRect(dx,height/4,10,height/2)
    //ctx.fillStyle = "#f00"
    //ctx.fillRect(10,fork.mid() * dy, dx, 10)
    //list.forEach((e, i) => ctx.fillRect(440 - dx, -15 + i * dy + dy/2, dx, 10))
    fork.draw(ctx, levels, levels+1, levels, dx, dy)
}
drawTree(easterEggTree)






var s = `[
    {"name":"Leiocephalus carinatus","DNA":"CTGCAACCAGCTACCACTGATTAATAGCCTGAATTGGGCTAGAACTAAACACACTAGCCATCATTCCGATTATCTCAAAACGACACCACCCGCGAGCGACAGAGGCCGCAACTAAATACTTCTTAACCCAAGCAGCCGCCTCGGCCCTAATCCTATTCTCAAGTACAATTAATGCCTGACACTCAGGAACCTGAGACATTACACAAACAACTAATAATATATCAAACATTCTACTAACAACAGCCTTAGCCATAAAACTAGGCCTAGCACCCACACACTTCTGACTACCAGAAGTCCTACAAGGGACCTCGATGATAACAGCCCTAATTATCAGCACCTGACAAAAACTAGCACCAATAGCCCTTATCGTACTAACAAACAATAACTTATCTTCAACCGTGCTGATAACAATAGGTATTTTATCTGCCATCATTGGGGGCTGAGGCGGACTAAACCAGACCCAAACACGAAAAATCATAGCATACTCATCCATCGCACACCTAGGCTGAATGGCAATCATCACCCCACTAATAACTAACCTACTCATTTTAAACCTAATCATATATCTACTTATAACGACATCAACATTCTTAACCCTTACATTTTCAAAATCAAAAACATTACAAGATATCGCCACACTATGAGCCTTATCTCCTACACTAATAATTATAACGATACTAGCCCTCCTATCACTAGGAGGACTCCCACCATTGACAGGATTTATTCCAAAGTGACTTGTCTTACAAGAACTAACAACACAAAACATAACTATAATAGCCACTATCATAGCACTATCAGCCCTCCTTAGCCTCTTCTTCTACTTACGCCTAACATACATTATAACCCTAACCACCCCACCAAACACAACAACATTCAAGCACAAATGACGATTTAATTACACAAATAATACTAATCCACTGTCTATCACTCTAACCATGTCAATTCTACTACTGCCAATTACACCTTTAATTCTGATATAGGGACTTAGGATAATATTAAACCAAGGGCCTTCAAAGCCCAAAACAGGAGTGAAACCCCCCTAGCCCCTGATAAGACTTGTGATATTCTAAAACACATCTTCTGAATGCAACTCAAACACTTTAATTAAGCTAAAGCCTCCAGAATAGGTGGGCCTCGATCCCACAACACACTAGTTAACAGCTAATTATCCAATCCAGCGGACTTCTACTCAGCTTCTCCCGTCTGGGAAAAACGGGAGAAGCCCCGGAGCCTTAAAGGGCTCATCCTTAAACTTGCATTTTAATGTGTTGCTTACACTACGGGGCTTGGTGAAGAGAGGAATTAAACCTCCATGAATAGGTCTACAGCCTACCGTCTAAACACTCGACCACTTTACCTGTGTTCATTACCCGTTGACTATTTTCAACC"},
    {"name":"Anolis cristatellus","DNA":"ATGAGCCCYACAATCTACACAATTATTTTGTCAAGCCTAGCAACAGGCACTATCATCACTATAACTAGCTTCCACTGACTAATGGCCTGAATCGGACTAGAGCTTAATACGCTAGCAATTATCCCGATTATTTCAACATTACACCACCCACGATCAACAGAAGCCGCAACAAAATACTTCTTAACACAAGCAGCAGCCTCTGCAATAATTATGTTTTCTAGCATAATTAATGCCTGAAACATAGGAACATGGGACATTACTCAAATATCTTATACCCCATCAAATGTTCTTCTTTTACTAGCACTGGCCCTAAAACTAGGACTAGCCCCAGCACACTTCTGACTCCCAGAGGTATTACAGGGCTCAACCTTATTTATTGCCCTCATTATTACTACGTGGCAAAAACTGGCCCCAATGTCACTTATCTACATATGTACAAATAATCTTCCATCAGTAATTTTATTAATACTAGGCATTATCTCCTCCACTGTCGGGGGGTGGTCTGGATTAAACCAAACACAAACTCGAAAAATCATAGCATACTCATCAATTGCACACCTTGGATGAATGGCTATAATCGCCTCAATTATAACAAACATCATAATTATAAACCTGGTGATTTATTTAATAATAACAACCACCTTGTTTACCACCCTAATTTGCTCTAAATCAAAAACAATTCAAGACACAGCAACCACTTGAACAACATCACCAACCCTAACTATCATTACTTTACTTTCTCTTCTGTCACTTGGGGGACTCCCACCTCTTACAGGATTTTTACCAAAATGACTAGTTTTAGAAGAAATAATTGTACAAAACTTAACCCCACTCGCCACAACCATAGCAATTTCCGCCCTTCTTAGTCTATTCTTCTATCTACGCCTAACCTACACCACAACACTAACATTAGCTCCAAACACCCTACAAATAAACTTTAAATGACGGTTTAAACCAACCACATCATTTATTCTAATAACCCTTTCAACTATGACCATTTTTTTACTACCTCTCATACCACTAACCCTTATATAAAAACTTAGGATAACATAAACCAAGAACCTTCAAAGTTCAGAATAAGGGTGTAAACCCCTTAGTTTTTGCAAGACTTGTAAAACATTAATTTACATCTCATGAATGCAACTCAAGCGCTTTTATTAAGCTAAAGCCTCTCTGAATAGGCGGGCCTTGATCCCACGATAAATTAATTAACAGCTAATTACCCAAACCAGCGGGCTTCTATTCGCTTCTCCCGTCGGTTGGGGAAACGGGAGAAGCCCCGGAGCCAATAAGGGCTCGCTTTCAAACTTGCATTTTGACGTGAAATCACTACAGGACTCGTAGTAAAGAAAGGGTTTAAACCAATATAAATAGATTTACAATCTACCGCCTAATAGTCAGCCACTTTACCTGTGTCCATTAAGCGTTGA"},
    {"name":"Anolis cybotes","DNA":"ATGAGCCCGACAATTTTTTCAATTATATTATCAAGCTTAGCAACAGGCACAATTATTACCATAACAAGCCATCACTGACTAATAGCCTGAATCGGATTAGAAATTAACACCTTAGCAATTATTCCAATTATTTCAATACAGCATAGCCCACGAGCAACAGAAGCAGCCACAAAATATTTCTTAACACAAGCAGCTGCATCCTCATTAATTTTATTTTCAAGCCTCATCAACGCCTGACAGACTGGCACATGAGATATTACTCAACTGTCAACCACCCAATCATGTATTCTCTTAACCATGGCACTATCAATAAAATTAGGCCTGGCCCCTCTACACTTTTGATTGCCAGAAGTAATTCAAGGAACAACAATACTTTCCGCCTTAATCATTATAACCTGACAAAAGCTAGCCCCCATATCATTAATTTATTTGACCTCAAACAATTTATCCACAACAACTCTTTTAATTCTGGGCCTTCTTTCCACAACAATCGGAGGTTGGGCGGGACTTAACCAGACACAGACTCGAAAAATTATAGCATACTCATCTATTGCCCACTTAGGATGAATGGCTACAATTGCCTCAATCATAACAAATATTCTTACCATAAATTTAATTATTTACTTATTACTTACTATAGCCACATTTTACTCCATTATTGTTACAAAATCAAAAACAATTCAAGATACATCAACAACCTGAACAAATTCACCTTACTTAATGATCTTAATAATATTAGCCCTGCTCTCATTAGGGGGCTTACCCCCATTAACAGGATTTATCCCAAAATGATTAATTCTAGAACAACTAACAGCCCAAAACCTAACTACACTAGCTCTTTTTATAACAATGACAGCTCTCCTTAGCTTATTTTTTTACTTACGCCTAACCTACACTACAACACTTACACTTTCCCCAAACACTATACAAACCAAATTTAAATGACGATTTAAACTTAATACAACAACCCCCCCAATGTCTACAACCCTAACAATAGCAATTTTTTTACTCCCACTTATACCAACATTAATACTTTAAAAACTTAGGATAAAACAAACCAAAAGCCTTCAAAGCTTGAAATAAGGGTGCAACCCCCCTAGTTTTTGTAAAACTTGCATTATACTATAATGCATCTCCTGAATGCAACTCAAGCACTTTAATTAAGCTAAAGCTTTACTGAATGGGCGGGCCTCGATCCCGCGATAAATTAATTAACAGCTAACTGCCCAAACCAGCGGGCTTCAATTCGCTTCTCCCGTTGGTGTAGGAAACGGGAGAAGCCCCGGAGCCTTTTAGGGCTCTTCTTTAAACTTGCATTTTAATGTGAAACACTTCGGGACTTTGATAGAGAGAGGAATTAAACCAGTGTAAATAGGACTACAGCCTACCGCCTAACATTCGGCCACTCTACCTGTGTTCATTAATCGTTGATTTTTCTCAACT"},
    {"name":"Anolis evermanni","DNA":"ATGAGCCCTACAATCTATACAATTATTTTGTCAAGCCTAGCAACAGGCACAATCATTACCATGACTAGCTTTCACTGACTTATAGCCTGAATTGGCCTAGAACTCAATACTCTGGCAATTATTCCAATTATTTCATCACAACACCACCCTCGATCTACAGAAGCCGCAACAAAATACTTCTTAACACAAGCAGCAGCATCTGCTATAATTCTGTTTTCAAGCATAACCAATGCCTGATTTACGGGCATATGAGATATTACTCAAATATCTTACACCCCATCTAATATCTTTTTAACCATAGCACTTGCTATAAAACTAGGCCTAGCCCCAACACACTTCTGATTTCCAGAAGTCCTACAAGGCTCAACCTTATTTACTGCTTTTGTTATTTCAACATGACAAAAACTGGCCCCAATATCATTAATTTTTTTAACTGTGGCCAACCTTCCACCTATAATTTTATTAACCTTAGGATTTTTTTCCTCTATTATTGGAGGATGAGGCGGACTAAACCAAACACAAACCCGAAAAATTATAGCATATTCATCAATCGCACACCTTGGATGAATGACTGTAATTTCCTCAATCATAACAAACATCATAGTTATTAATCTATTAATTTATTTAATAATAACAACAGCCCTATTTTTAGCCTTAATTTTATCTAAATCAAAAACAATTCAAGATACAACAAACACTTGAACAATATCACCCACTTTAACCATCACAATAATACTTCTTCTACTATCACTTGGTGGCCTACCTCCACTAACAGGATTTTTGCCAAAATGACTAATTCTAGAAGAATTAACAACCCAAAACCTTATACCACTAGCAACAATTATAGCACTAGCCGCCCTCCTCAGCTTATTCTTTTACTTACGCCTAGCTTATACTACAACCTTAACACTTTCTCCAAATACACTACAAATAAAATTTAAATGACGATTTAAACCAACCACCCCGCCCCAACTAATAATACTTTCAACACTAACTATCTTTCTTTTACCCTTAACACCACTAATTTTGTTATAAAAACTTAGGATAATGTTAAACCAAGAACCTTCAAAGTTCAAAATAAGGGTGTAACTCCCTTAGTTTTTGTAAGACTTGTAAAATACTAATCTACATCTCATGAATGCAACTCAAGCGCTTTTATTAAACTAAAGCCTCCCTGAATAGGCGGGCCTTGATCCCACGACAAATTAATTAACAGCTAACTACCCTAACCAGCGGGCTTCTATTCGCTTCTCCCGTTGGTTGGGAAACGGGAGAAGCCCCGGAGCCCATTAGGGCTCTTCTTCAAACTTGCATTTTGACGTGAAACCACTACAGAGCTTTTAGTAAAGAAAGGAGTTTAACCAATGTAAGTAAGTTTACAGCTTACCGCCTAACACTCGGCCACTTTACCTGTGTTTATTAATCGTTGA"},
    {"name":"Anolis occultus","DNA":"ATGAGCCCCAATAATCTACTTAATAGTTTAATTAGCTTATTTATANNNACAACACTAGTAACCACTAGCCACCACTGATTATTAGCGTGAGTTGGCTTGGAAATTAACACACTTGCAGCTATTCCACTTATCTCAACAAAACATCACCCCCGAGCTACAGAATCAGCCACAAAATACTTTTTAATTCAAGCAGCAGCCTCAGCTACAATCTTATTTTCAAGTACCATTAATGCTTGACACACAGGCTCATGAGACATTACCCAAATAACCACAAACCCATCCAATATTTTACTAACTATAGCCCTTGCCATAAAACTAGGCCTAGCCCCAACACACTTCTGACTCCCAGAAGTACTTCAAGGGTCAACTATAGACACTGCCCTAATTATTACAACATGACAAAAAATTGCCCCAATAACCCTAATTTACCTCACCATAAACAACCTATACCCAAGCATTCTAATAACAATAGGCCTATTATCTACAATAATCGGGGGTTGAGGAGGCCTAAACCAAACACAAACCCGAAAAATTATAGCATACTCATCAATTGCACACTTGGGTTGAATGGCCGTAATTTCCACCCTAATAACAAACATCTTTATTATAAACCTAATTATGTATCTAATTATAACAACAACCGCATTCTGGGCCCTAATCTGCTTAGAATCTAAAACTGTAAAAGACACAACAACTGCCTGAACAACCTCACCAACCATCACTTTAACACTTCTTATTTCCCTCTTATCCCTAGGAGGCCTTCCCCCTCTCTCTGGATTCTTACCAAAATGACTAATCCTAGAAGAACTTACAAACCAAAATCTACTACCATTAACCACCACTATAGCAGTCTCCTCCCTGCTAAGCCTGTTTTTTTACCTACGACTTACCTATAATACAACACTAACAATAGCCCCAAACACAATACAAACAAAATTCAAGTGACGATTTAAACCTAATAACCCACCCTTATTATTAACAGCTACTGCCCCACTAACCACTCTACTACTCCCGCTTACACCTCTTATATTAATATAGAAACTTAGATTTAAACAAACCAAGAGCCTTCAAAGCTCAAAATATGGGTGTAACCCCCATAGTTTCTGTAACACTTACAAAACTTTAATTTACATCTTTTGATTGCAACTCAAACACTTTTATTAAGCTAAAGCCTCCTTGAATAGTCGGGCTTCGATCCCACGACAAATTAATTAACAGCTAACTGCCCAAACCAGCGGGCTTCTACTCGCTTCTCCCGTCGTGGGGGAGACGGGAGAAGCCCCGGAGCCTTTTGGGGCTCCTTTTCAAACTTGCATTTTGACGTGAAAACACTTCGAGACTTTAATAAGGAAAGGAATCAAACCCCTGTAAATAGGACTACAGCCTACCGCCTAACACTCGGCCACCTTACCTGTGTCTATTAATCGTTGA"},
    {"name":"Anolis olssoni","DNA":"ATGAACCCCACCATCTACATAATTATTTTATCAAGCCTAGCAACAGGAACAATTATTACTATGACCAGCTTTCATTGATTAATAGCATGAATTGGATTAGAAGTCAACACACTAGCAATTATTCCAATCATCTCAGCCCCTCACCACCCACGATCAACAGAAGCTGCAACAAAATACTTTCTCACACAAGCAGCTGCCTCCGCTATAATTCTATTTGCCAGTATAATTAACGCCTGACAAACAGGCACATGAGACATTACTCAACTGTCAACCACCCCTGCCCACACCCTCCTAACTATAGCACTAGCCATAAAACTAGGACTTGCCCCACTTCACTTCTGATTACCAGAAGTTATTCAAGGTGCCACCCTTCCCACTGCTTTCATCATTGTAACATGGCAAAAACTTGCTCCTATATCACTTATTTTTTTAACCATAAACAACCTAAACCCAACAATTTTACTTCTCCTTGGACTTCTATCTTCTACAGTAGGAGGATGAGCCGGATTAAACCAAACACAAACCCGAAAAATTATAGCCTATTCATCAATTTCACACTTAGGCTGAATGGCCGCAATCTCCTCTATTATAACTAATATTCTTATTATAAACCTAACCCTTTATTTAATTATAACAACAACCATGTTTTATACCCTAATTTTAACTAAATCCAAAACAATCCAAGACTCAACCCTCACCTGATCACTTTCACCAGTACTAACAATTATTATAATACTAACACTCCTCTCACTAGGAGGACTACCTCCCCTAACCGGATTTTTACCAAAATGAATAATCCTAGAAGAACTTACTACCCAAAACCTAACCCCACTGGCCACCATAATAGCCATTTCAGCTTTACTAAGCCTATTTTTTTACCTACGCCTAACTTATACAACAACCTTAACACTCTCCCCAAACACAATACAAACAAAACTCAAATGGCGATTTAAATTAAATAAACCAACAACACTTATACTAATAACTTCTACAATTACCACCTTCTTACTCCCCCTATCACCACTCATTTTAATATAAAAACTTAGGTTTAACCAAACCAAGAGCCTTCAAAGCTCAAAATAAGGGTCAAACACCCTTAGTTTTTGTAAGACTTGTGAAATACTAATACACATCTTCTGAATGCAACTCAAACACTTTAATTAAGCTAAAGCCTCTCTGAATAGGCGGGCCTCGATCCCGCGACAAATTAATTAACAGCTAACTACCCAAACCAGCGGGCTTCTACTCGCTTCTCCCGTTGGTAAGGGAACGGGAGAAGCCCCGGAGCCGTTTGGGGCTCTTCTTCAAACTTGCATTTTGATGTGAAACACTTCGGGACTTTGATAAAGAAAGGAATTAAACCAATGTTAATAGGACTACAGCCTACTGCCTATCATTCGGCCACTTTACCTGTGTTCATTAATCGTTGA"},
    {"name":"Anolis pulchellus","DNA":"ATGAGCCCCCAAATCTATACAATTATTTTATCAAGCTTAGCAGCAGGCACTATTATTACCATAACAAGTTTTCACTGATTAATAGCCTGAATTGGACTTGAACTTAACTCATTAGCAATTATTCCAATTATTTCAACACTACACCACCCTCGAGCCACAGAAGCTGCAACAAAATACTTCTCCACTCAAGCGGCAGCTTCAGCTATAATTTTATTTTCTAGCATAATTAATGCCTGATATACAGGAACATGAGATATTACTCACATATGTTACACCCCCTCTAATGTTATTTTAACCATAGCACTAGCCATAAAACTAGGACTTGCCCCAGCACACTTCTGACTCCCAGAAGTACTTCAAGGCTCAACCTTATTTACTGCCCTTATTATTTCTACCTGACAAAAACTAGCTCCAATATCACTAATCTTTTTAACCATTAATAATCTTCCACCTATAATTTTACTCACACTAGGAATTTTTTCTTCTATTGTAGGAGGATGGGGAGGATTAAACCAAACACAAACTCGAAAAATCATAGCATATTCATCAATTGCACACCTAGGATGAATAACCGCTATTGCCTCAATCATAACAAACATTATAATTATAAACCTAATAGTTTACTTAATTATAACAGCAGCCCTATTTTTCTCACTAATTTATTCTAAATCAAAAACAATTAAAGATACAGCAGCGACTTGAACAATATCACCCATCTTAACTATTACAACAACACTAACTTTACTTTCACTTGGAGGGCTTCCNCCACTAACAGGATTTTTACCAAAATGACTTATTCTAGAAGAACTAGTTATACAAAACCTTATTCCACTAGCCACTACCCTGGCAATATCTGCTCTTCTTAGCCTATTTTTTTACTTACGATTAACCTATACAACCACACTTACACTTTCACCAAACACCCTACAAATAAAATTTAAATGACGATTTAAACCAACCACTACATTTTTTCTAATAATTTTTTCTACAGCGACTATTTTTTTATTACCTCTTACGCCCCTAATTTTATTATAAAAACTTAGGATAATTCTTAAACCAAGAGCCTTCAAAGCTCAAAATGAGGGTTAAAACCCCTTAGTTTTTGTAAGACTTGTGAAATACTAATTCACATCTCATGAATGCAACTCAAGCACTTTTATTAAGCTAAAGCCTCCCTGAATAGGCGGGCCTCGATCCCACCGACAAATTAATTAACAGCTAACTGCCCTAACCAGCGGGCTTCTATTCGCTTCTCCCGTTGGTTGGGAAACGGGAGAAGCCCCGGAGCCCTTTAGGGCTCATCTTCAAACTTGCATTTTGACGTGTAAACCACTACTGAGGCTCTGATAAAGAAAGGTTTTAAACCTCTGTAAATAGATTTACAGCCTACCGCCTAATACTCGGCCACTTTACCTGTGTCTATTAATCGTTGA"},
    {"name":"Anolis sheplani","DNA":"ATGAGCCCAACCATCTACACAATTATTTTATCAAGCCTAGCAACCGGCACTATTATTACAATATCTAGTTATCACTGACTAATGGCCTGAATCGGCCTAGAGATTAATACACTAGCAATAATCCCGATCATCTCAACAACACATCACCCACGATCTACAGAAGCAGCCACAAAATATTTTTTAATTCAAGCTGCAGCCTCCGCCCTAATTTTGTTCTCAAGTATAACTAACGCCTGATATACAGGCTCCTGGGACATTACCCAAATAGTAAACAAGCCCTCAAATATTGCACTAACAGTAGCACTGGCCATAAAACTAGGACTGGCCCCACTTCACTTTTGATTACCAGAGGTAGTTCAAGGATCAACCACAACCACAGCACTTATTATTATAACCTGACAAAAACTAGCCCCCATATCACTGATTTTTCTTACCATAAATAACTTATCTACAACAGCCCTTCTACTGATAGGACTTCTGTCTTCAATAATTGGGGGCTGAGGGGGCTTAAACCAAACACAAGTACGAAAAATTATAGCATACTCATCAATTGCCCACCTAGGGTGGATAGCCTCCGTTTCCTCAATTATAACAAACCTTTTAATCATAAACCTGGTAATTTATATTATTGTAACAACATCCACCTTCTTCCCCCTAATTACTTCCAAATCTAAGACAATTCAAAATATAACTTCAACTTGAACACTCTCCCCCACACTAATTGTTGTTATAATATTATCCCTCCTGTCCTTAGGGGGCCTGCCCCCTTTAACTGGGTTTATTCCAAAGTGACTTATTATGGAAGAACTAATTCTACAAAACTTTAACCTATTTACCACTATAATAGCCCTGTCATCTTTATTAGGCCTCTTCTTTTACCTACGAATAGTCTACTTAACTACACTTACACTTTCCCCAAACGTGGCCCAAACAAAATTCAAATGACGATTTTATCCAAATACGACAACCAACTTTTTCTCAGCATTTTTCTTAATTTCTACCCTTCTTCTTCCCCTCACACCACTAATTTTAATATAAAAACTTAGGATAAATAAACCAAGAGCCTTCAAAGCTCAAAACATGGGTAAAACCCCCATAGTTTTTGTAAGACCTGTACTATACTATTATACATCTCCTGAATGCAACTCAAGCACTTTAATTAAGCTAAAGCCTCTCTAAGTAGGCGGGCTTTGATCCCGCGACAAATTAATTAACAGCTAACTACCCAAACCAGCGGGCTTCTACTTGCTTCTCCCGTTAGTGAAGGGAACGGGAGAAGCCCCGGAGCCTTTATGGCTCTTTTTCAAACTTGCATTTTGACGAGAAACCACTACAGGGCTCTGATAAAGAAAGGAGTTAAACCAATGTTAGCAGGACTACAGCCTGCCGCCTTACACTCGGCCACTTTACCTGTGTTTATTACCCGTTGA"},
    {"name":"Anolis coelestinus","DNA":"ATGAGCCCATTAATTTTTTCAATCGTCCTGTCAAGCCTAGCAACAGGTACTATTATTACCATAACCAGCTATCACTGATTAATAGCTTGAATTGGCCTAGAAATCAACACACTTGCTATCATTCCAATTATCTCAATACAACATCACCCACGATCTACAGAAGCCGCTACAAAATATTTCCTTACACAAGCGGCAGCCTCCGCTATAATTTTATTTGCCAGCACAACAAATGCTTGATACACAGGCACATGAGATATTACTCAAATTTCCGCCACCCCATCCCACATCCTTCTAACTGCCGCATTAGCCATAAAACTAGGCCTGGCCCCCATACACTTCTGATTACCAGAAGTCCTTCAAGGGTCTACCTTAAAAACAAGCTTTATTATTGTAACATGACAAAAACTAGCCCCTATATCATTAATTTATCTAACTATAAATAATCTTTCCTCAGCAATTCTTCTCTCACTAGGACTAGTTTCATCCATGGTTGGAGGATGGGGCGGACTAAACCAAACACAAACCCGAAAGATCATAGCATATTCATCAATTGCACATCTCGGATGAATGGCCTCAATCTCCTCCATTATAACTAATATTCTTGTTATAAACTTAATACTTTACCTAATTATAACAACATCTGTATTCTACGCCTTGATCTTAACAAAGTCTAAAACAATTCAAGATACAACAACCACCTGAACACTCTCCCCAACTTTAACAATTATCATAATACTCTCACTTCTTTCCCTTGGAGGCTTACCCCCCTTAACTGGATTTACACCAAAATGACTTATCTTAGAAGAACTAACTACCCAAAATCTACTCCCCTTAGCCACTACTATAGCAATATCCGCCCTACTCAGCCTGTTTTTCTACTTACGTTTAACCTATACCACAACCCTCACATTTTCCCCAAACACCATACAAACAAAATTTAAATGACGATTTAAACCAACTAATTTAACAACACCACTAACACTTACAACACCTCTAACCGTCCTCTTACTTCCCTTAGTCCCACTAATTATATTATAAGAAATTTAGGATAACATTAAACCAAGAGCCTTCAAAGCTCAAAATACGGGTGAAACCCCCATAATTTCTGTAAGACCTGTGAAATACTAATTCACATCTCATGAATGCAACTCAAGCACTTTTATTAAGCTAAAGCCTTTCTGAATAGGCGGGCCTCGAGCCCACGACAAATTAGTTAACAGCTAATTACCCAAACCAGCGGGCTTCTATTCGCTTCTCCCGTCGGTAAGAAACGGGAGAAGCCCCGGAGCCCTTTAGGGCTCTTCTTCAAACTTGCATTTTGATGTGGAACACCCCAGGACTTGATGAGGAAGGGAATTAAACCCCTGTTAATGAGTCTACAGCTCACCGCCTAACACTCGGCCACCTTACCTGTGTCCATCAATCGTTGA"}
]`

var defaultArray = JSON.parse(s)
//console.log(j)
// for(var i in j) {
//     console.log("i have data "+j[i])
// }
//console.log(j.length)
// var i = 0
// for (i = 0; i < arr.length - 1; i++) {
//     //console.log(arr[i].DNA.length)
//     var dif = []
//     var j = i+1
//     for(j = i+1; j < arr.length; j++) {
//         dif.push(0)
//     }
//     var x = 0
//     for(x = 0; x < arr[i].DNA.length; x++) {
//         var c1 = arr[i].DNA[x]
//         //j = i+1
//         for(j = i + 1; j < arr.length; j++) {
//             if (arr[j].DNA.length <= x || arr[j].DNA[x] != c1)
//                 dif[j] += 1
//         }
//     }
//     console.log("for "+i+":")
//     dif.forEach(e => console.log(e))
// }
function compare(array, square) {
    var i = 0
    var difs = []
    for (i = 0; i < array.length - 1; i++) {
        var j = i+1
        var idifs = []
        for(j = i+1; j < array.length; j++) {
            var dif = 0
            var x = 0
            for(x = 0; x < array[i].DNA.length; x++) {
                if (array[j].DNA.length <= x || array[j].DNA[x] != array[i].DNA[x])
                    dif += 1
            }
            // console.log(i+" vs "+j+" is "+dif)
            idifs.push(dif)
        }
        difs.push(idifs)
    }
    if (square) {
        //Turn the right triangle array into a square
        difs.push([])
        for(i = 0; i < difs.length; i++) {
            difs[i].unshift(0)
            var j = 0
            for(j = i-1; j >= 0; j--) {
                difs[i].unshift(difs[j][i])
            }
        }
    }
    // console.log(difs)
    return difs;
}
Match = class {
    constructor(size, first, second) {
        this.size = size
        this.first = first
        this.second = second;
    }
}
function forkJSON(array) {
    var difs = compare(array ,false)
    var i = 0
    var j = 0
    var matches = []
    for(i = 0; i < difs.length; i++) {
        for(j = 0; j < difs[i].length; j++) {
            matches.push(new Match(difs[i][j], i, j+i+1))
        }
    }
    matches.sort((a, b) => a.size - b.size)
    var bases = [] //each base holds the fork that has that index's data
    for(i = 0; i < array.length; i++) {
        bases.push(Basic(array[i].name))
    }
    matches.forEach((v, i, a) => { //Now we have a list of closest matches in order, add forks respectively
        if (!bases[v.first].contains(array[v.second].name))  {
            //Okay, build a fork between the fork v.first is in and the fork v.second is in
            var newFork = Dual(bases[v.first], bases[v.second])
            //Assign newFork to every base that shared a fork with v.first and v.second
            for(i = 0; i < bases.length; i++) {
                // if (bases[i] == bases[v.first] || bases[i] == bases[v.second]) {
                if (bases[i].contains(array[v.first].name) || bases[i].contains(array[v.second].name)) {
                    bases[i] = newFork;
                }
            }
        }
    })
    return bases[0]
}
//drawTree(forkJSON(defaultArray))
document.getElementById("read-dna-button").onclick = function(){drawTree(forkJSON(defaultArray))}
document.getElementById("read-dna-text").onclick = function(){
    drawTree(forkJSON(JSON.parse(prompt("Paste your JSON text",`[{"name":"...`))))
}
document.getElementById("submit-dna-file").onchange = function(){
    var files = document.getElementById('submit-dna-file').files;
    if (files.length <= 0) {
        return false;
    }
    var fr = new FileReader();
    fr.onload = function(e) {
        var result = JSON.parse(e.target.result);
        //var formatted = JSON.stringify(result, null, 2);
        drawTree(forkJSON(result))
    }
    fr.readAsText(files.item(0));
}